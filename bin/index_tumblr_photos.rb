#! ruby
#
# Rubygem `ruby-tumblr' is required.
# You can install the gem:
#
# <tt>gem install ruby-tumblr</tt>
#

require 'rubygems'
require 'tumblr'
require 'erb'
require 'optparse'
require 'open-uri'
require 'fileutils'
require 'date'


class Array
  def group(&b)
    r = []
    buf = []
    a = nil
    r << buf
    self.each do |e|
      if buf.empty?
        buf << e
        a = yield e
      else
        if a == yield(e)
          buf << e
        else
          buf = [e]
          r << buf
          a = yield e
        end
      end
    end
    r
  end
end

TEMPLATE = <<EOT
<html>
<head>
  <title>Index of <%= @hostname %></title>
<% if @options[:stylesheet] -%>
  <link rel="stylesheet" href="<%= @options[:stylesheet] %>" />
<% end -%>
</head>

<body>
  <h1>Index of <%= @hostname %>: <%= formatdate(@posts.last.last) %> - <%= formatdate(@posts.first.first) %></h1>

  <ul>
  <%- if @options[:back_to] %>
    <li><a href="<%= @options[:back_to] %>">Back</a></li>
  <%- end -%>
  <%- @posts.each do |day_posts| -%>
    <li><a href="#<%= formatdate2(day_posts.first) %>"><%= formatdate(day_posts.first) %> (<%= day_posts.size %> posts)</a></li>
  <%- end -%>
  </ul>

  <%- @posts.each do |day_posts| -%>
    <h2><a name="<%= formatdate2(day_posts.first) %>"><%= formatdate(day_posts.first) %> (<%= day_posts.size %> posts)</a></h2>
    <%- day_posts.each do |post| -%>
      <a href="<%= post.url %>"><img src="<%= thumb_url(post.urls[100]) %>" /></a>
    <%- end -%>
  <%- end -%>
  <%- if @options[:back_to] %>
    <p><a href="<%= @options[:back_to] %>">Back</a></p>
  <%- end -%>
  <hr/>
  Generated by index_tumblr_photos.
</body>
</html>
EOT


def get_all_posts
  s = @options[:offset] ? Date.today - @options[:offset] : Date.today
  e = @options[:recent] ? s - (@options[:recent] - 1) : nil
  posts = []
  catch(:loop) do
    Tumblr::API.read(@hostname) do
      (0..(last_page - 1)).each do |n|
        page(n).posts.each do |post|
          next if Date.parse(post.date.to_s) > s
          throw :loop if e and Date.parse(post.date.to_s) < e
          posts << post if post.instance_of?(Tumblr::Data::Photo)
        end
      end
    end
  end
  posts
end

def get_posts
  posts = []
  Tumblr::API.read(@hostname) do
      page(0).posts.each do |post|
        posts << post
      end
  end
  posts
end

def formatdate(post)
  t = post.date
  t.strftime("%b %d, %Y")
end

def formatdate2(post)
  post.date.strftime("%Y%m%d")
end

def thumb_url(thumb)
  if @options[:thumb_dir]
    filename = thumb.match(/([^\/]+)$/)[0]
    "./#{@options[:thumb_dir]}/#{filename}"
  else
    thumb
  end
end


@options = {}
opt = OptionParser.new
opt.banner = "Usage: #{opt.program_name} [options] YOUR_TUMBLR_HOST"
opt.on('-t', '--thumbnail-dir=DIR', 'download thumbnail to DIR'){|v| 
  @options[:thumb_dir] = v
  FileUtils.rm_r(v, {:force => true})
  Dir.mkdir(v)
}
opt.on('-r', '--recent[=N]', 'recent N days (default is 1)'){|v| @options[:recent] = v ? v.to_i : 1}
opt.on('-o', '--offset=N', 'offset N days'){|v| @options[:offset] = v.to_i}
opt.on('-s', '--stylesheet=CSS', 'specify stylesheet'){|v|
  @options[:stylesheet] = v
}
opt.on('-b', '--back-to=PAGE', 'make link to back to PAGE'){|v| @options[:back_to] = v}
opt.on('-c', '--count-only', 'count posts only'){@options[:count] = true}
opt.parse!

if ARGV.empty?
  print opt
  exit
end
@hostname = ARGV.shift     # Your Tumblr hostname.

posts = get_all_posts
#posts = get_posts

if posts.empty?
  puts "No posts."
  exit
end

if @options[:count]
  posts.group{|p| formatdate(p)}.each do |pos|
    printf("%3d  %s\n", pos.size, formatdate(pos.first))
  end
  printf("\n(%3d total)\n", posts.size)
  exit
end

if @options[:thumb_dir]
  posts.each do |p|
    file = open(p.urls[100]){|f| f.read}
    filename = p.urls[100].match(/([^\/]+)$/)[0]
    open("#{@options[:thumb_dir]}/#{filename}", "wb") do |f|
      f.write(file)
    end
    $stderr.print(".")
  end
end

@posts = posts.group{|p| formatdate(p) }

script = ERB.new(TEMPLATE, nil, "-")
script.run

